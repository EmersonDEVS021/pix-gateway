// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  isAdmin   Boolean  @default(false)
  isActive  Boolean  @default(true)
  balance   Decimal  @default(0.00) @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts            Account[]
  sessions            Session[]
  transactions        Transaction[]
  internalTransfers   InternalTransfer[] @relation("UserTransfers")
  receivedTransfers   InternalTransfer[] @relation("UserReceived")
  documents           Document[]
  apiCredentials      ApiCredential[]
  webhookConfigs      WebhookConfig[]
  fees                Fee[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Transaction {
  id              String            @id @default(cuid())
  userId          String
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  amount          Decimal           @db.Decimal(10, 2)
  fee             Decimal           @default(0.00) @db.Decimal(10, 2)
  netAmount       Decimal           @db.Decimal(10, 2)
  pixKey          String?
  recipientName   String?
  recipientDoc    String?
  description     String?
  pixupId         String?           @unique
  qrCode          String?           @db.Text
  qrCodeImage     String?           @db.Text
  expiresAt       DateTime?
  paidAt          DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model InternalTransfer {
  id          String                   @id @default(cuid())
  fromUserId  String
  toUserId    String
  amount      Decimal                  @db.Decimal(10, 2)
  fee         Decimal                  @default(0.00) @db.Decimal(10, 2)
  netAmount   Decimal                  @db.Decimal(10, 2)
  description String?
  status      InternalTransferStatus   @default(PENDING)
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt

  fromUser User @relation("UserTransfers", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User @relation("UserReceived", fields: [toUserId], references: [id], onDelete: Cascade)

  @@map("internal_transfers")
}

model Document {
  id          String         @id @default(cuid())
  userId      String
  type        DocumentType
  fileName    String
  filePath    String
  status      DocumentStatus @default(PENDING)
  rejectionReason String?
  uploadedAt  DateTime       @default(now())
  reviewedAt  DateTime?
  reviewedBy  String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model ApiCredential {
  id        String   @id @default(cuid())
  userId    String
  name      String
  apiKey    String   @unique
  apiSecret String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_credentials")
}

model WebhookConfig {
  id        String   @id @default(cuid())
  userId    String
  url       String
  events    String   // JSON array of events
  secret    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("webhook_configs")
}

model Fee {
  id          String   @id @default(cuid())
  userId      String?  // null for global fees
  type        FeeType
  percentage  Decimal? @db.Decimal(5, 4)
  fixedAmount Decimal? @db.Decimal(10, 2)
  minAmount   Decimal? @db.Decimal(10, 2)
  maxAmount   Decimal? @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("fees")
}

model GatewayConfig {
  id          String   @id @default(cuid())
  name        String   @default("PIX Gateway")
  logo        String?
  primaryColor String  @default("#000000")
  secondaryColor String @default("#ffffff")
  supportEmail String?
  supportPhone String?
  termsUrl    String?
  privacyUrl  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("gateway_config")
}

enum TransactionType {
  PIX_PAYMENT
  PIX_RECEIVE
  PIX_TRANSFER
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
}

enum InternalTransferStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum DocumentType {
  CPF
  RG
  CNH
  PASSPORT
  PROOF_ADDRESS
  BANK_STATEMENT
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FeeType {
  PIX_PAYMENT
  PIX_TRANSFER
  INTERNAL_TRANSFER
  WITHDRAWAL
}
